{
    "docs": [
        {
            "location": "/", 
            "text": "Hypothesis Testing using Phylogenies\n\n        \nOpen-source software package\n\n            \nfor the analysis of genetic sequences\n\n            \nusing techniques in phylogenetics\n\n    \nDownload", 
            "title": "Home"
        }, 
        {
            "location": "/download/", 
            "text": "Downloads\n#\n\n\nThe download page can currently be found \nhere", 
            "title": "Download"
        }, 
        {
            "location": "/download/#downloads", 
            "text": "The download page can currently be found  here", 
            "title": "Downloads"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n#\n\n\nFrom Source\n#\n\n\nHyphy depends on CMake for its build system.\n\n\nTo install, make sure you have CMake \n3.0 installed. Hyphy is dependent on other development libraries like\nlibcurl and libpthread. Libcurl requires development libraries such as crypto++ and openssl ( or gnutls depending on your configuration)\nOn Ubuntu these are libcurl-dev, libcrypto++-dev and libssl-dev.\n\n\nYou can download a specific release from this repository or if you prefer the master branch simply \nclone the repo with\n\n\ngit clone git@github.com:veg/hyphy.git\n\n\nChange your directory to the newly cloned directory\n\n\ncd hyphy\n\n\nConfigure the project from the source directory using CMake.\n\n\ncmake .\n\n\nIf you prefer to use other build systems, such as Xcode,\nconfigure using the -G switch\n\n\ncmake -G Xcode .\n\n\nCMake supports a number of build system generators,\nfeel free to peruse these and use them if you wish.\n\n\nBy default, HyPhy installs into \n/usr/local\n\nbut it can be installed on any location of your system \nby providing an installation prefix\n\n\ncmake -DINSTALL_PREFIX=/location/of/choice\n\n\nFor example, this configuration will install hyphy at /opt/hyphy\n\n\nmkdir -p /opt/hyphy\n\n\ncmake -DINSTALL_PREFIX=/opt/hyphy .\n\n\nIf you are on an OS X platform, you can specify which OS X SDK to use\n\n\ncmake -DCMAKE_OSX_SYSROOT=/Developer/SDKs/MacOSX10.9.sdk/ .\n\n\nIf you're on a UNIX-compatible system,\nand you're comfortable with GNU make,\nthen run \nmake\n with one of the following build targets:\n\n\n\n\nMAC - build a Mac Carbon application\n\n\nHYPHYGTK - HYPHY with GTK\n\n\nSP - build a HyPhy executable (HYPHYSP) without multiprocessing\n\n\nMP2 - build a HyPhy executable (HYPHYMP) using pthreads to do multiprocessing\n\n\nMPI - build a HyPhy executable (HYPHYMPI) using MPI to do multiprocessing\n\n\nHYPHYMPI - build a HyPhy executable (HYPHYMPI) using openMPI \n\n\nLIB - build a HyPhy library (libhyphy_mp) using pthreads to do multiprocessing\n\n\nGTEST - build HyPhy's gtest testing executable (HYPHYGTEST)\n\n\n\n\nFor example to create a MPI build of HYPHY using openMPI ensure that you \nhave openmpi installed and available on your  path. You can check if this\nis the case after running \n\ncmake .\n you should see something similar to this in your output\n\n\n-- Found MPI_C: /opt/scyld/openmpi/1.6.3/gnu/lib/libmpi.so;/usr/lib64/libibverbs.so;/usr/lib64/libdat.so;/usr/lib64/librt.so;/usr/lib64/libnsl.so;/usr/lib64/libutil.so;/usr/lib64/libm.so;/usr/lib64/libtorque.so;/usr/lib64/libm.so;/usr/lib64/libnuma.so;/usr/lib64/librt.so;/usr/lib64/libnsl.so;/usr/lib64/libutil.so;/usr/lib64/libm.so\n\n\n-- Found MPI_CXX: /opt/scyld/openmpi/1.6.3/gnu/lib/libmpi_cxx.so;/opt/scyld/openmpi/1.6.3/gnu/lib/libmpi.so;/usr/lib64/libibverbs.so;/usr/lib64/libdat.so;/usr/lib64/librt.so;/usr/lib64/libnsl.so;/usr/lib64/libutil.so;/usr/lib64/libm.so;/usr/lib64/libtorque.so;/usr/lib64/libm.so;/usr/lib64/libnuma.so;/usr/lib64/librt.so;/usr/lib64/libnsl.so;/usr/lib64/libutil.so;/usr/lib64/libm.so\n\n\nThen run \n\n\nmake HYPHYMPI\n\n\nAnd then run make install to install the software\n\n\nmake install\n\n\n\n\nHYPHYMP(I) will be installed at  \n/location/of/choice/bin\n\n\nlibhyphy_mp.(so/dylib/dll) will be installed at \n/location/of/choice/lib\n\n\nHyPhy's standard library of batchfiles will go into \n/location/of/choice/lib/hyphy\n\n\n\n\nHYPHYGTEST isn't installed normally,\nbecause it serves no utility outside of testing.\n\n\nTo test HyPhy, build with the  GTEST target and run ./HYPHYGTEST from the source directory.\n\nmake GTEST\n\n\n./HYPHYGTEST", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#from-source", 
            "text": "Hyphy depends on CMake for its build system.  To install, make sure you have CMake  3.0 installed. Hyphy is dependent on other development libraries like\nlibcurl and libpthread. Libcurl requires development libraries such as crypto++ and openssl ( or gnutls depending on your configuration)\nOn Ubuntu these are libcurl-dev, libcrypto++-dev and libssl-dev.  You can download a specific release from this repository or if you prefer the master branch simply \nclone the repo with  git clone git@github.com:veg/hyphy.git  Change your directory to the newly cloned directory  cd hyphy  Configure the project from the source directory using CMake.  cmake .  If you prefer to use other build systems, such as Xcode,\nconfigure using the -G switch  cmake -G Xcode .  CMake supports a number of build system generators,\nfeel free to peruse these and use them if you wish.  By default, HyPhy installs into  /usr/local \nbut it can be installed on any location of your system \nby providing an installation prefix  cmake -DINSTALL_PREFIX=/location/of/choice  For example, this configuration will install hyphy at /opt/hyphy  mkdir -p /opt/hyphy  cmake -DINSTALL_PREFIX=/opt/hyphy .  If you are on an OS X platform, you can specify which OS X SDK to use  cmake -DCMAKE_OSX_SYSROOT=/Developer/SDKs/MacOSX10.9.sdk/ .  If you're on a UNIX-compatible system,\nand you're comfortable with GNU make,\nthen run  make  with one of the following build targets:   MAC - build a Mac Carbon application  HYPHYGTK - HYPHY with GTK  SP - build a HyPhy executable (HYPHYSP) without multiprocessing  MP2 - build a HyPhy executable (HYPHYMP) using pthreads to do multiprocessing  MPI - build a HyPhy executable (HYPHYMPI) using MPI to do multiprocessing  HYPHYMPI - build a HyPhy executable (HYPHYMPI) using openMPI   LIB - build a HyPhy library (libhyphy_mp) using pthreads to do multiprocessing  GTEST - build HyPhy's gtest testing executable (HYPHYGTEST)   For example to create a MPI build of HYPHY using openMPI ensure that you \nhave openmpi installed and available on your  path. You can check if this\nis the case after running  cmake .  you should see something similar to this in your output  -- Found MPI_C: /opt/scyld/openmpi/1.6.3/gnu/lib/libmpi.so;/usr/lib64/libibverbs.so;/usr/lib64/libdat.so;/usr/lib64/librt.so;/usr/lib64/libnsl.so;/usr/lib64/libutil.so;/usr/lib64/libm.so;/usr/lib64/libtorque.so;/usr/lib64/libm.so;/usr/lib64/libnuma.so;/usr/lib64/librt.so;/usr/lib64/libnsl.so;/usr/lib64/libutil.so;/usr/lib64/libm.so  -- Found MPI_CXX: /opt/scyld/openmpi/1.6.3/gnu/lib/libmpi_cxx.so;/opt/scyld/openmpi/1.6.3/gnu/lib/libmpi.so;/usr/lib64/libibverbs.so;/usr/lib64/libdat.so;/usr/lib64/librt.so;/usr/lib64/libnsl.so;/usr/lib64/libutil.so;/usr/lib64/libm.so;/usr/lib64/libtorque.so;/usr/lib64/libm.so;/usr/lib64/libnuma.so;/usr/lib64/librt.so;/usr/lib64/libnsl.so;/usr/lib64/libutil.so;/usr/lib64/libm.so  Then run   make HYPHYMPI  And then run make install to install the software  make install   HYPHYMP(I) will be installed at   /location/of/choice/bin  libhyphy_mp.(so/dylib/dll) will be installed at  /location/of/choice/lib  HyPhy's standard library of batchfiles will go into  /location/of/choice/lib/hyphy   HYPHYGTEST isn't installed normally,\nbecause it serves no utility outside of testing.  To test HyPhy, build with the  GTEST target and run ./HYPHYGTEST from the source directory. make GTEST  ./HYPHYGTEST", 
            "title": "From Source"
        }, 
        {
            "location": "/tutorials/selection/README/", 
            "text": "Selection detection\n#\n\n\nData files\n\n\nAll the example alignment files used here are available in this \ndata directory\n.\nYou may find it convenient to download the \nzip file\n\nwith all the files from that directory, and unpack it on your machine.\n\n\nNotation\n\n\nWe will use the following notation.\n\n\n\n\nfilename\n refers to a file on your local file system.\n\n\nOption\n refers to an analysis option that you will select when prompted by HyPhy.\n\n\nMenu item\n refers to a menu option you will select in the Mac OS X or Windows GUI (Graphical User Interface) version of HyPhy,\nor a command line you will supply in terminal with the command line version of HyPhy.\n\n\nX\n refers to a model parameter X.\n\n\nThe following formatting denotes text output to the screen by HyPhy.\n\n\n\n\n[BUSTED] Selected 35 branches as the test (foreground) set: RABENSBURG_ISOLATE,WNFCG,SPU116_89,Node11,Node9,KUNCG,Node8,..\n[BUSTED] Obtaining initial branch lengths under the GTR model\n[BUSTED] Log(L) = -7745.475588071066\n[BUSTED] Fitting the unconstrained branch-site model\n\n\n\n\n\n\n\nEstimate alignment-wide \n.\n#\n\n\n\n\nSelect the appropriate analysis to run\n\n\n[if using GUI]\n Choose \nAnalysis:Standard Analyses:Basic Analyses:AnalyzeCodonData.bf\n\n\n\n\n\n  * \n[if using CLI]\n When presented with the list of standard analysis options upon launch, choose \nBasic Analyses\n, then option 1 (\nAnalyse codon data with a variery of standard models using given tree.\n)\n\n\n\n\n\n\nUniversal\n genetic code option\n\n\nThe file to process\n\n\n[GUI]\n In the file dialog, navigate to and select \nWestNileVirus_NS3.fas\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g.\n  \n/Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas\n\n\nMG94CUSTOMCF3X4\n model; the \nMuse Gaut 94\n model with the \nCF3x4\n frequency estimator.\n\n\nGlobal\n model parameter option; estimate rate parameters jointly from all sites and branches.\n\n\n012345\n nucleotide substitution rates; estimate the general time reversible (GTR, 5 rates) model.\n\n\nConfirm that the tree included in the file will be used\n\n\n\n\n[GUI]\n Type \ny\n into the \nbottom box of the console window\n (see red box in the image) and hit \"Enter\"\n  \n\n\n\n\n\n\n[CLI]\n Type \ny\n and hit \"Enter\"\n\n\n\n\nEstimate\n branch lengths directly\n\n\n\n\nThe output should look like this\n\n\n______________RESULTS______________\n\n\nLog\n \nLikelihood\n \n=\n \n-6413\n.50468184347\n;\n\n\nShared\n \nParameters\n:\n\n\nR\n=\n0\n.008557848966878849\n\n\nGT\n=\n0\n.2303600815210618\n\n\nCT\n=\n1\n.979989664067556\n\n\nCG\n=\n0\n.02076764883647483\n\n\nAC\n=\n0\n.2428440082030551\n\n\nAT\n=\n0\n.3056061615274677\n\n\n\nTree\n \ngivenTree\n=((((((\nHNY1999\n:0\n.001101787189557129\n,\nNY99_EQHS\n:0\n.00108698796444847\n)\nNode6\n:0\n,\nNY99_FLAMINGO\n:0\n)\nNode5\n:0\n,\nMEX03\n:0\n.003274397587748566\n)\nNode4\n:0\n.001043699094072735\n,\nIS_98\n:0\n.002238969679775947\n)\nNode3\n:0\n.0108106327401535\n,\nPAH001\n:0\n.009947231998139823\n)\nNode2\n:0\n.006480815229843424\n,\nAST99\n:0\n.01679372620666718\n,((((\nRABENSBURG_ISOLATE\n:1\n.05102590132809\n,(\nWNFCG\n:0\n.01053193289945618\n,\nSPU116_89\n:0\n.00569613982107767\n)\nNode19\n:0\n.507068944265484\n)\nNode17\n:0\n.5772661357618611\n,\nKUNCG\n:0\n.08756311980263866\n)\nNode16\n:0\n.06947527827356371\n,(\nETHAN4766\n:0\n.02385184540957046\n,(\nCHIN_01\n:0\n.01206163326344818\n,\nEG101\n:0\n.01506055273715259\n)\nNode25\n:0\n.007681688497219724\n)\nNode23\n:0\n.003442808476468687\n)\nNode15\n:0\n.01851421610241251\n,(((\nITALY_1998_EQUINE\n:0\n.009037431851104481\n,\nPAAN001\n:0\n.007872553578665653\n)\nNode30\n:0\n.002694356278175029\n,(\nRO97_50\n:0\n.001642931262019352\n,\nVLG_4\n:0\n.00108305411902561\n)\nNode33\n:0\n.002794580801147744\n)\nNode29\n:0\n.0007243769694723316\n,\nKN3829\n:0\n.003058011972423634\n)\nNode28\n:0\n.01097965849521703\n)\nNode14\n:0\n.00929314901848397\n);\n\n\n\n\n\n\nThe \nR\n parameter denotes the global \n (dN/dS) ratio and is the object of this analysis.\n\n\n\n\nRun alignment-wide tests for episodic diversification (BUSTED).\n#\n\n\n\n\nBUSTED is a method described in \nMurrell et al\n. It has been extensively tested and shows better power and accuracy than either \n\"branch-site\" models in PAML\n, or the \n\"covarion\" style models\n\n\n\n\nWe will perform branch-site model-based tests for episodic selection affecting a proportion of sites in\nthe alignment along a proportion of branches in the tree (i.e. is there evidence of selection \nanywhere\n in the alignment and \nanywhere\n on the tree).\nThe data set in we are using includes partial clonal HIV-1 env sequences from epidemiologically linked partners (source and recipient)\n\n\n\n\nSelect the appropriate analysis to run\n\n\n[GUI]\n Choose \nAnalysis:Standard Analyses:Positive Selection:BUSTED.bf\n\n\n[CLI]\n When presented with the list of standard analysis options upon launch, choose \nPositive Selection\n, then option 4 (\nRun the Branch-site Unrestricted Statistical Test for Episodic Diversification to test for evidence of episodic alignment-wide selective pressure.\n)\n\n\nUniversal\n genetic code option\n\n\nThe file to process\n\n\n[GUI]\n In the file dialog, navigate to and select \nHIV.nex\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nex\n\n\nConfirm that the tree included in the file will be used\n\n\n[GUI]\n Type \ny\n into the bottom box of the console window and hit Enter\n\n\n[CLI]\n Type \ny\n and hit Enter\n\n\nChoose all branches to include in the test (\nAll\n)\n\n\n[CLI]\n You will need to type \nd\n and hit \"Enter\" after selecting the \nAll\n option to exit the selection dialog.\n\n\n\n\nThe analysis will now run for a few minutes and produce the following output\n\n\n[BUSTED] Selected 26 branches as the test (foreground) set: R20_239,R20_245,Node5,R20_240,R20_238,R20_242,Node4,R20_241,Node3,R20_243,Node2,R20_244,Node1,D20_233,D20_235,D20_236,D20_232,Node17,D20_234,D20_237,Node21,Node16,D20_230,D20_231,Node24,Node15 \n[BUSTED] Obtaining initial branch lengths under the GTR model \n[BUSTED] Log(L) = -2114.132335772669 \n[BUSTED] Fitting the unconstrained branch-site model \n[BUSTED] Log(L) = -2039.992959126133. Unrestricted class omega = 104.6591567580357 (weight = 0.02032866068122922) \n[BUSTED] Fitting the branch-site model that disallows omega \n 1 among foreground branches \n[BUSTED] Log(L) = -2076.666683221396 \n[BUSTED] Likelihood ratio test for episodic positive selection, p = 1.110223024625157e-16 \n\n\n\n\n\nFor example, in this case the analysis inferred that\n\n\n\n\nA proportion of sites (~0.02) is evolving with dN/dS \n 1 (~105) along a subset of the branches (it is not known which).\n\n\nForcing dN/dS = 1 provides a significantly worse (p ~ 10\n-16\n) fit to the data, i.e. rejects the hypothesis of no positive selection in the alignment.\n\n\n\n\nIn addition to this output, HyPhy will also generate a \nJSON\n file with a more detailed analysis output. The JSON will be written to same directory as the input alignment file, with \nBUSTED.json\n appended to the file name, e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nex.BUSTED.json\n  This JSON file can be visualized and explored with this \nweb app\n, e.g., to obtain plots like those shown in the lecture slides.\n\n\nRun BUSTED using datamonkey.org\n#\n\n\n\n\nNavigate to http://test.datamonkey.org, selected \nBUSTED\n from the \nMethods and Tools\n menu.\n\n\nChoose the file to analyze on the next screen.\n\n\nUse the analysis setup screen to select all the \ndonor\n branches as the foreground (shift-click on the branches to add them to selection)\n\n\n\nAs the analysis runs, you will see a progress page looking something  like this\n\n\n\nWhen the analysis finishes, you will be directed to a results page, which is very similar to the web app referenced above\n\n\n\n\nTesting for selection on an \na priori\n specified set of branches\n#\n\n\nThe tree in the \nHIV.nex\n is annotated with {} to indicate the set of test (\"foreground\") branches (e.g. you can use this \nwidget\n to select foreground\nbranches and then export them to Newick using the \nNewick:Export\n menu dialog).\n\n\nin this case the branch being tested is the \ntransmission\n branch, i.e. the one separating the source and the recipient in the phylogenetic tree.\nBUSTED will only constrain \n \n 1 on these branches (allowing the rest of the tree to have its own \n distribution) during testing.\n\n\nAn annotated Newick string looks like this (a single branch):\n\n\n\n\n((((((R20_239:0.001179071552709126,R20_245:0.003569393318767422):0.002373643652152119,R20_240:0.00354445225954759,\nR20_238:0,R20_242:0.007143686359514547):0.001169032517101171,R20_241:0.003555888002841892):0.001829250056707198,\nR20_243:0.006486065374683752):0.003845820830922537,R20_244:0.02113434306810657)\n{Test}\n:0.03269082780807394,\nD20_233:0.02550919363771013,(((D20_235:0,D20_236:0,D20_232:0):0.006433904687642939,\n(D20_234:0,D20_237:0):0.005843978498632621):0.01022675723558638,\n(D20_230:0.02979851732996924,D20_231:0.006905678660095517):0.02444611465196596):0.005946252173834307);\n\n\n\n\nRepeat the analysis from the previous section, choosing option 4 (\nSet Test\n) in step 5.\nNote that you could also manually select the set of branches to test in the same dialog.\n\n\nThe results of this \na priori\n analysis are\n\n\n[BUSTED] Selected 1 branches as the test (foreground) set: Node1 \n[BUSTED] Obtaining initial branch lengths under the GTR model \n[BUSTED] Log(L) = -2114.13233621422 \n[BUSTED] Fitting the unconstrained branch-site model \n[BUSTED] Log(L) = -2031.302017161514. Unrestricted class omega = 524.9720891747666 (weight = 0.07815647810018292) \n[BUSTED] Fitting the branch-site model that disallows omega \n 1 among foreground branches \n[BUSTED] Log(L) = -2050.101940483789 \n[BUSTED] Likelihood ratio test for episodic positive selection, p = 6.843795752331516e-09 \n\n\n\n\n\nQuestions.\n#\n\n\n\n\nUse the \nweb app\n to visualize the JSON result file from this analysis and\ncompare the inferred \n distributions for the foreground and background branches.\n\n\nExplain why the log-likelihood for the unconstrained model is higher for the case when \na priori\n branches are tested?\n\n\nDo these results suggest that the transmission branch is evolving differently from the rest of the tree?\n\n\nIf the \na priori\n analysis had a negative result (no selection along the transmission branch), might it still be possible to\nfind evidence of selection in the \nAll\n branches analysis?\n\n\n\n\n\n\nUse aBSREL to find lineages which have experienced episodic diversification.\n#\n\n\n\n\naBSREL is a method described in \nSmith et al\n. It is an extension of our popular \nBS-REL model\n, which performs a complexity analysis and model selection prior to doing hypothesis testing. It runs much faster than BS-REL and has better statistical properies.\n\n\n\n\nWe continue using the \nHIV.nex\n dataset from the previous example, but now we are interested in scanning the phylogeny\nfor all the branches where selection may have operated.\n\n\n\n\nSelect the appropriate analysis to run\n\n\n[GUI]\n Choose \nAnalysis:Standard Analyses:Positive Selection:BranchSiteREL.bf\n\n\n[CLI]\n When presented with the list of standard analysis options upon launch, choose \nPositive Selection\n, then option 1 (\nUse the random effects branch-site model (2010) to find lineages subject to episodic selection.\n)\n\n\nUniversal\n genetic code option\n\n\nYes\n to choose the adaptive version of BSREL.\n\n\nNo\n to assume that synonymous rates do not vary from site to site\n\n\nThe file to process\n\n\n[GUI]\n In the file dialog, navigate to and select \nHIV.nex'\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nex\n\n\nDecline to use the tree included in the file (annotation from the previous step conflicts with the current aBSREL implementaton)\n\n\n[GUI]\n Type \nn\n into the bottom box of the console window and hit Enter\n\n\n[CLI]\n Type \nn\n and hit Enter\n\n\nChoose the tree file\n\n\n[GUI]\n In the file dialog, navigate to and select \nHIV.nwk'\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nwk\n\n\nChoose all branches to test (\nAll\n)\n\n\n[CLI]\n You will need to type \nd\n and hit Enter after selecting the \nAll\n option to exit the selection dialog.\n\n\nWhere to save the analysis results (more than one file, see below)\n\n\n[GUI]\n In the file dialog, find a place to save the result file, naming it \nHIV.aBSREL\n.\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.aBSREL\n\n\n\n\nThe analysis will now run for several minutes and produce a lot of diagnostic output.\n\n\nAs the initial phase, aBSREL fits the standard Muse-Gaut 94 model which estimates a single \n for each branch and prints out model fit statistics. This is the simplest model that can be selected by aBSREL.\n\n\n[PHASE 0] Fitting the local MG94 (no site-to-site variation) to obtain initial parameter estimates\n\nLog L = -2069.673153141118 with 66 degrees of freedom. IC = 4273.293894919101\n\nBranch omega values\n\n    Count    = 26\n    Mean     = 5.015163008040247\n    Median   = 1.911847453671735\n    Variance = 20.26898469566522\n    Std.Dev  = 4.502108916459621\n    COV      = 0.8976994185915583\n    Sum      = 130.3942382090464\n    Sq. sum  = 1160.672977319228\n    Skewness = 0.8547462897381892\n    Kurtosis = 58.55544061358484\n    Min      = 0.1474879956566399\n    2.5%     = 0.1474879956566399\n    97.5%    = 10\n    Max      = 10\n\n\n\n\n\nNext, aBSREL sorts all the branches by length (longest first), and tries to greedily add \n categories to one branch at a time, until the addition is no longer justified by AIC\nc\n scores. For example, for \nNode1\n (the transmission branch)\n\n\n[PHASE 1] Fitting Branch Site REL models to one branch at a time\n\n[PHASE 1] Branch Node1 log(L) = -2048.380, IC = 4234.826\n    2 rate classes\n    Node: mixtureTree.Node1\n    Length parameter = 0.01335020389229876\n    Class 1\n        omega = 0.736\n        weight = 0.927\n    Class 2\n        omega = 499.798\n        weight = 0.073\n\n[PHASE 1] Branch Node1 log(L) = -2048.447423263603, IC = 4239.085721554758\n    3 rate classes\n    Node: mixtureTree.Node1\n    Length parameter = 0.0194263003300435\n    Class 1\n        omega = 0.385\n        weight = 0.925\n    Class 2\n        omega = 0.000\n        weight = 0.000\n    Class 3\n        omega = 314.702\n        weight = 0.075\n\n\n\n\n\nusing two rate classes improves the IC from 4273.3 to 4234.83, but going to three rate classes is not justified. aBSREL will now fix a 2-bin \n distribution for \nNode1\n and move to the next branch. When all branches are done, a summary of inferred model complexity will be printed to the screen.\n\n\n[INFERRED MODEL COMPLEXITY]\n\n    \nmixtureTree.R20_239\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.R20_245\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node5\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.R20_240\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.R20_238\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.R20_242\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node4\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.R20_241\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node3\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.R20_243\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node2\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.R20_244\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node1\n \nhas\n \n2\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.D20_233\n \nhas\n \n2\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.D20_235\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.D20_236\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.D20_232\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node17\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.D20_234\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.D20_237\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node21\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node16\n \nhas\n \n2\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.D20_230\n \nhas\n \n2\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.D20_231\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node24\n \nhas\n \n2\n \nsite\n \nrate\n \nclasses\n\n    \nmixtureTree.Node15\n \nhas\n \n1\n \nsite\n \nrate\n \nclasses\n\n\n\n\n\n\nNote that only a few branches support 2 \n classes, and the majority are well-explained without any site-to-site variation.\nIn the next phase, aBSREL optimizes all parameters in the just inferred model model\n\n\n[PHASE 2] Fitting the full LOCAL alternative model (no constraints)\n\nLog L = -2010.471450731734 with 76 degrees of freedom, IC = 4175.52599570315\n((((((R20_239:0.001180872214151883,R20_245:0.003568958594949872)Node5:0.00238190144130175,R20_240:0.003553829750818045,R20_238:0,R20_242:0.00716830032133561)Node4:0.001173481128053423,R20_241:0.003576676330678178)Node3:0.00155544697576297,R20_243:0.006756755941630225)Node2:0.00415900454948532,R20_244:0.02082000515352331)Node1:0.2905921716926325,D20_233:1.951982256546112,(((D20_235:0,D20_236:0,D20_232:0)Node17:0.006441027083836533,(D20_234:0,D20_237:0)Node21:0.005840812770752585)Node16:0.2538902924947701,(D20_230:1.765119288716005,D20_231:0.007781540968601186)Node24:0.02458866035691175)Node15:0)\n\n\n\n\n\nNext, the analysis will proceed to test all the branches we selected in step 8 (which is \nAll\n) to see if there is a proportion of sites\nwith \n \n 1 along that branch, and whose removal would cause a significant drop in log-likelihood. As a shortcut, if the branch has no sites with \n \n 1, it will not be tested (one can just set the p-value to 0.5).\n\n\nThis is the most time consuming phase of the analysis. As the tests are done, aBSREL will print out a running tally to the screen, including the rate distribution inferred for a particular branch under the null (\n \n 1) model, and the p-value for the branch. For example, the snippet below shows the alternative and null distributions of \n along Node1 (the same branch we tested with BUSTED previously), and reports the \nuncorrected\n p-value for the test of selection at this branch.\n\n\nNode\n:\n \nmixtureTree\n.\nNode1\n\n    \nLength\n \nparameter\n \n=\n \n0.02933683537846648\n\n    \nClass\n \n1\n\n        \nomega\n \n=\n \n0.872\n\n        \nweight\n \n=\n \n0.932\n\n    \nClass\n \n2\n\n        \nomega\n \n=\n \n751.770\n\n        \nweight\n \n=\n \n0.068\n\n\n...\nTesting\n \nfor\n \nselection\n \nat\n \nthis\n \nbranch\n\n\n\nNode\n:\n \nmixtureTree\n.\nNode1\n\n    \nLength\n \nparameter\n \n=\n \n0.08668188509082339\n\n    \nClass\n \n1\n\n        \nomega\n \n=\n \n0.816\n\n        \nweight\n \n=\n \n0.000\n\n    \nClass\n \n2\n\n        \nomega\n \n=\n \n1.000\n\n        \nweight\n \n=\n \n1.000\n\n\np\n-\nvalue\n \n=\n \n9.103440223867665\ne\n-\n12\n\n\n\n\n\n\nOnce all the tests have been done, aBSREL will print out the list of all branches with p-values below 0.05 \nafter\n\napplying the \nHolm-Bonferroni multiple testing correction\n, and a CPU time report.\n\n\nSummary of branches under episodic selection (26 were tested, of which 14 required optimizations) :\n    Node1 p = 2.45792886044427e-10\n    D20_233 p = 0.0001215300920816009\n    Node16 p = 0.0002149117196342809\n\n\n === CPU TIME REPORT === \n    MG94 model fit : 00:00:05\n    Rate class complexity analysis : 00:00:33\n    aBSREL model fit : 00:00:07\n    Individual branch selection testing : 00:01:29\n    Total time : 00:02:43\n\n\n\n\n\nOutput files generated by aBSREL will all be of the form \nPREFIX.extension\n where PREFIX is whatever you chose in step 9 above.\n\n\n\n\nPREFIX.mglocal.fit\n : a HyPhy batch file containing the model fit (including all parameter estimates) of PHASE 0 (only branch variation). This is a NEXUS file with a private NEXUS HYPHY block.\n\n\nPREFIX.fit\n : a HyPhy batch file containing the model fit (including all parameter estimates) of PHASE 2 (unconstrained branch-site model). This is a NEXUS file with a private NEXUS HYPHY block.\n\n\nPREFIX.json\n: a JSON file storing all the relevant analysis output, it can be visualized with this \nweb app\n\n\nPREFIX\n: a CSV file containing branch-by-branch output (similar to what is shown in the \nTable\n tab of the web app)\n\n\n\n\nQuestions.\n#\n\n\n\n\nWhich model (aBSREL or BUSTED) provides a better fit to the data, based on AIC\nc\n (the web apps report AIC\nc\n in the summary table)? \n\n\nCompare the \n distributions inferred for Node1 (the transmission branch) by BUSTED with the \na priori\n branch selection, and by aBSREL. If they differ, can you identify some of the key differences between the models that could explain the difference?\n\n\nUse the \nweb app\n to compare the list of branches which would have p-values \n 0.05 without the multiple test correction. Are the lists notably different?\n\n\n\n\n\n\nUse FUBAR to find sites which have experienced pervasive diversification.\n#\n\n\n\n\nFUBAR is described in \nMurrell et al\n which is intended to supersede (by dint of its speed and statistical performance), previous REL and FEL methods.\n\n\n\n\nWe will use the \nWestNileVirus_NS3.fas\n dataset to identify individual sites which have experienced pervasive diversification over the entire tree. An analysis by \nBrault et al\n using our older counting method (SLAC),\nfound a single site (249) subject to positive selection.\n\n\n\n\nSelect the appropriate analysis to run\n\n\n[GUI]\n Choose \nAnalysis:Standard Analyses:Selection/Recombination:FUBAR.bf\n\n\n[CLI]\n When presented with the list of standard analysis options upon launch, choose \nSelection/Recombination\n, then option 1 (\nDetect site-specific pervasive diversifying and purifying selection using the FUBAR (Fast Unbiased Bayesian AppRoximate) method on a multiple partition data set, e.g. produced by GARD.\n). Note that, as suggested by the text, FUBAR can account for the confounding effect of recombination.\n\n\nUniversal\n genetic code option\n\n\n1\n to specify that a single partition is being analyzed (you could specify more to correct for recombination).\n\n\nConfirm that the tree included in the file will be used\n\n\n[GUI]\n Type \ny\n into the bottom box of the console window and hit Enter\n\n\n[CLI]\n Type \ny\n and hit Enter\n\n\nThe file to process\n\n\n[GUI]\n In the file dialog, navigate to and select \nHIV.nex'\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data//WestNileVirus_NS3.fas\n. The analysis will now begin running (see output below but more propmts await). As BUSTED and aBSREL, FUBAR will write a number of \nPREFIX.exention\n files to disk. \nPREFIX\n is the path to the alignment file in this case, and the context of h\n\n\nChoose N to define an NxN grid (use the default 20)\n\n\n[GUI]\n Type \n20\n into the bottom box of the console window and hit Enter\n\n\n[CLI]\n Type \n20\n and hit Enter\n\n\nChoose the number of MCMC chains to run (use \n3\n)\n\n\nSpecify Markov chain parameters (use suggested defaults, i.e., \n2000000\n, \n1000000\n, \n100\n, \n0.05\n)\n\n\n[GUI]\n Type \n3\n into the bottom box of the console window and hit Enter\n\n\n[CLI]\n Type \n3\n and hit Enter\n\n\n\n\nOutput after Step 5\n\n\nFUBAR will write intermediate and result files to\n/Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.extension\n\n[FUBAR PHASE 1] Optimizing relative branch lengths under the nucleotide REV model\n[FUBAR PHASE 1 FINISHED] log(L) = -7745.475468266388\n    Length of tree 1 (substitutions/site) = 0.6721285491158012\n[DIAGNOSTIC] FUBAR wrote the self-contained nucleotide fit file to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.gtr_fit\n\n\n\n\n\nOutput after Step 6\n\n\n[DIAGNOSTIC] FUBAR will use a 20X20 grid\n[FUBAR PHASE 2] Determining appropriate branch scaling using the 20X20 grid points.\nComputing the likelihood function on grid points 400/400 00:00:02   Best scaling achieved for dN/dS =  0.03.\n    Computing site-by-site likelihoods at 20X20 grid points\nComputing the likelihood function on grid points 400/400 00:00:03   Finished with likelihood calculations. Achieved throughput of  66.67 calculations/second\n[DIAGNOSTIC] FUBAR wrote the self-contained codon fit file to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.codon_fit\n[DIAGNOSTIC] FUBAR wrote the the site likelihoods file to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.grid_info\n\n\n\n\n\nOutput after Step 8\n\n\n[FUBAR PHASE 3] Running an MCMC chain (ID 0) to obtain a posterior sample of grid point weights: 2000000 total steps, of which 1000000 will be discarded as burn-in, and sampling every 10000 steps. Dirichlet prior concentration parameter = 0.5.\nRunning MCMC chain ID 0. Current step: 2000000/2000000. Mean sampled log(L) = -6619.31564200728. Acceptance rate = 0.03111951555975778\n[FUBAR PHASE 3] Running an MCMC chain (ID 1) to obtain a posterior sample of grid point weights: 2000000 total steps, of which 1000000 will be discarded as burn-in, and sampling every 10000 steps. Dirichlet prior concentration parameter = 0.5.\nRunning MCMC chain ID 1. Current step: 2000000/2000000. Mean sampled log(L) = -6619.258683970502. Acceptance rate = 0.03157801578900789\n[FUBAR PHASE 3] Running an MCMC chain (ID 2) to obtain a posterior sample of grid point weights: 2000000 total steps, of which 1000000 will be discarded as burn-in, and sampling every 10000 steps. Dirichlet prior concentration parameter = 0.5.\nRunning MCMC chain ID 2. Current step: 2000000/2000000. Mean sampled log(L) = -6620.143375380813. Acceptance rate = 0.03128851564425782\n[FUBAR PHASE 3 DONE] Finished running the MCMC chains; drew 3x100 samples from chains of length 2000000 after discarding 1000000 burn-in steps. Achieved throughput of 125000 moves/sec.\n\n[DIAGNOSTIC] FUBAR wrote samples from 3 independent chains to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.samples[0-2]\n\n\nTabulating results for site 618/619 00:00:01\n[DIAGNOSTIC] FUBAR wrote the results of its analysis to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.fubar.csv\n\n\n\n\n\nFinal results\n\n\n[RESULTS] At posterior probability \n= 0.9 there were 1 sites under diversifying positive selection, of which  0.01 [0 - 0] are expected to be false positives.\n\nCodon   Prob[dN/dS\n1]   EBF[dN/dS]\n1    PSRF    N_eff\n249 0.9877421834151304  562.1145080622537   1.063515998847144   24.05393297483982\n\n\n\n\n\nQuestions\n#\n\n\n\n\nTry the same analysis with different grid sizes (5,10,30).\n\n\nHow do the run times change?\n\n\nAre the results robust to the choice of N?\n\n\nRun FUBAR with using the same settings on a large HIV RT dataset (\n400 sequences) \nHIV_RT.nex\n, which was previously analyzed by us using a [dedicated method for finding directional selection, MEDS] (http://www.ploscompbiol.org/article/info%3Adoi%2F10.1371%2Fjournal.pcbi.1002507).\n\n\nHow does FUBAR time scale with the number of sequences?\n\n\nHow does the list of sites found by FUBAR compare with the MEDS paper?\n\n\nAnd with the list of sites known for their as resistance associated for \nNNRTI\n and \nNRTI\n?\n\n\nExplore the effect of correcting for recombination with partitioning, by running FUBAR on \nCVV_G.fas\n [no partitioning] and \nCVV_G_GARD.nex\n [partitioning into non-recombinant fragments using GARD]. How different are the lists of sites produced by the analyses?\n\n\n\n\n\n\nUse MEME to find sites which have experienced episodic diversification.\n#\n\n\n\n\nMEME is a \npublished method\n which is our default recommendation for finding individual sites under selection. It is MUCH slower than FUBAR, however, so there's room for both.\n\n\n\n\nWe continue to use the \nWestNileVirus_NS3.fas\n dataset from the previous example, to find sites where selection operated along a subset of branches, while the rest of the tree may have been strongly conserved (in \naddition\n to the type of sites found by FUBAR).\n\n\nMEME tests each individual site separately; it runs quite slowly on a desktop, but very quickly on a cluster. You may also run MEME on \ndatamonkey\n to speed up the process. MEME requires a lot of user input (this is a legacy issue and will be addressed in the upcoming HyPhy v3 release).\n\n\n\n\nSelect the appropriate analysis to run\n\n\n[GUI]\n Choose \nAnalysis:Standard Analyses:Selection:QuickSelectionDetection.bf\n\n\n[CLI]\n When presented with the list of standard analysis options upon launch, choose \nPositive Selection\n (10), then option 9 (\nQuickly test for positive selection using several approaches.\n).\n\n\nUniversal\n genetic code option\n\n\nNew analysis\n\n\nThe file to process\n\n\n[GUI]\n In the file dialog, navigate to and select \nHIV.nex'\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas\n.\n\n\n012345\n (GTR combined with the codon model)\n\n\nConfirm that the tree included in the file will be used\n\n\n[GUI]\n Type \ny\n into the bottom box of the console window and hit Enter\n\n\n[CLI]\n Type \ny\n and hit Enter\n\n\nSave nucleotide model fit to \nPREFIX.gtr\n. We'll replace PREFIX with somewhere on the file system you wish to save the results to, e.g., \n/Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3_meme\n\n\nEstimate dN/dS only\n\n\nMEME\n (HyPhy will start running the analysis now)\n\n\n0.1\n for the p-value (MEME is a conservative test on small alignments)\n\n\nN\n (do not save fit files for individual codons)\n\n\n[This prompt will appear \nafter\n the analysis is finished] Save the CSV file with analysis results to \nPREFIX.csv\n, e.g., \n/Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3_meme\n\n\n\n\nOutput after step 8\n\n\nPhase\n \n1\n:\nNucleotide\n \nModel\n \n(\n012345\n)\n \nModel\n \nFit\n\n\n\n\n-\n7745.47549841979\n\n\n\nPhase\n \n2\n:\nMG94x\n(\n012345\n)\n \nModel\n \nFit\n\n\n\n\n\nPhase\n \n3\n:\nEstimating\n \ndN\n/\ndS\n\n\n\n\nNuc\n-\ncodon\n \nscaling\n \nfactor\n:\n3.091598974159624\n\n\nRaw\n \nscaling\n \nfactor\n:\n3.091598974159624\n\n\nTree\n \nscaling\n \nfactor\n(\nS\n)\n:\n \n1\n\n\n\nUsing\n \ndN\n/\ndS\n=\n0.02681098065530952\n\n\nCodon\n \nmodel\n:\n-\n6564.63922229292\n\n\n\nPhase\n \n4\n:\n \nAncestral\n \nState\n \nReconstruction\n \nand\n \nCounting\n\n\n\n\n\n\nAfter step 10, for each codon, a line like this will be printed (this will also be saved to the final CSV file).\n\n\n| Codon:  249| Beta1:       0.86| P(Beta1):  0.00| Beta2:       2.50| P(Beta2):  1.00| alpha:       0.00| LRT:   7.62| p:  0.01| Log(L): -33.85 *P\n\n\n\n\n\n\n\n is the estimate for the synonymous rate at this site shared by all branches\n\n\n1 is the estimate for the first non-synonymous rate; by definition \n1 \n \n\n\nP(\n1) is the proportion of branches at that site which are estimated to evolve with with \n1\n\n\n2 is the estimate for the second non-synonymous rate; \n2 is unconstrained\n\n\nP(\n2) is the proportion of branches at that site which are estimated to evolve with with \n2\n\n\nLRT is the likelihood ratio test statistic obtained relative to the null which sets \n2  \n \n\n\np is the p-value for positive selection at this site\n\n\nif *P is displayed at the end of the line, the p-value is at or below the threshold chosen in step 9.\n\n\n\n\nQuestions\n#\n\n\n\n\nFind sites detected as selected by MEME, but not by FUBAR. What makes them different from those which are detected by both methods?\n\n\nUsing R (or another data analysis package), plot how LRT (or p-value) varies over sites.\n\n\nIs \n(1-p)\n [p-value] of MEME correlated with the posterior probability of positive selection derived by FUBAR (use a non-parametric association test, e.g. rank correlation)? Use the CSV files generated by each analysis to import the results into a statistical package for analysis.\n\n\n\n\n\n\nUse RELAX to compare selective pressures on different parts of the tree\n#\n\n\n\n\nRELAX is a method described in \nWertheim et al\n. It is based on the \nBS-REL model\n branch site framework, but the tree is partitioned (a priori) into non-overlapping sets of branches, and the separate distributions of \n are fitted to each set and compared for relative \nrelaxation\n (\n values contract to 1) or \nintensification\n (\n values move away from 1).\n\n\n\n\nWe continue using the \nHIV.nex\n dataset, and are now interested in seeing if natural selection in the recipient (\nR\n branches) and the donor (\nD\n branches) operate at different intensities.\n\n\n\n\nSelect the appropriate analysis to run\n\n\n[GUI]\n Choose \nAnalysis:Standard Analyses:Positive Selection:RELAX.bf\n\n\n[CLI]\n When presented with the list of standard analysis options upon launch, choose \nPositive Selection\n, then option 10 (\nTest whether selected branches are under relaxed or intensified selection against reference branches.\n)\n\n\nUniversal\n genetic code option\n\n\nThe file to process\n\n\n[GUI]\n In the file dialog, navigate to and select \nHIV.nex\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nex\n\n\nDecline to use the tree included in the file (we will use a tree with different branch annotation)\n\n\n[GUI]\n Type \nn\n into the bottom box of the console window and hit Enter\n\n\n[CLI]\n Type \nn\n and hit Enter\n\n\nChoose the tree file\n\n\n[GUI]\n In the file dialog, navigate to and select \nHIV-relax.nwk'\n\n\n[CLI]\n Input the full path name to the file (make sure there is no trailing space), e.g. \n/Users/sergei/Coding/hyphy-tutorials/selection/data/HIV-relax.nwk\n\n\nSelect the \ntest\n set of branches\n\n\n[GUI]\n Choose \nRecipient\n \n\n\n[CLI]\n Choose option 3 (\nRecipient\n)\n\n\nSelect the \nreference\n set of branches\n\n\n[GUI]\n Choose \nDonor\n \n\n\n[CLI]\n Choose option 2 (\nDonor\n)\n\n\nSelect analysis type (selecting \nMinimal\n will greatly reduce run time)\n\n\n[GUI]\n Choose \nMinimal\n \n\n\n[CLI]\n Choose option 2 (\nMinimal\n)\n\n\n\n\nThe output of the analysis will look like\n \n\n\n[RELAX] Obtaining branch lengths under the GTR model \n[RELAX] Log(L) = -2114.132338088236 \n[RELAX] Obtaining omega and branch length estimates under the partitioned MG94xGTR model \n[RELAX] Log(L) = -2076.093223041783 \n[RELAX] Fitting the RELAX null model \n[RELAX] Log(L) = -2031.204697143867 \n[RELAX] Fitting the RELAX alternative model \n[RELAX] Log(L) = -2024.075837744705. Relaxation parameter K = 0.4389230603260226 \n[RELAX] Likelihood ratio test for relaxation on Test branches, p = 0.0001594057084282063 \n\n\n\n\n\nThe result of the analysis is that \"Test\" (recipient) branches have \n that scales like \n \nK\n, where \nK\n is 0.4389, i.e., shrink towards 1 (selection is weaker). The likelihood ratio test is to reject \nK=1\n (no difference is selective pressure), which yields a highly significant p = 0.00016 here.\n\n\nLike in other analyses, HyPhy will generate a JSON file (e.g., \nHIV.nex.RELAX.json\n) storing all the relevant analysis output, which can be visualized with this \nweb app\n. For example, you can see the fitted rate distributions.", 
            "title": "Tutorials"
        }, 
        {
            "location": "/tutorials/selection/README/#selection-detection", 
            "text": "Data files  All the example alignment files used here are available in this  data directory .\nYou may find it convenient to download the  zip file \nwith all the files from that directory, and unpack it on your machine.  Notation  We will use the following notation.   filename  refers to a file on your local file system.  Option  refers to an analysis option that you will select when prompted by HyPhy.  Menu item  refers to a menu option you will select in the Mac OS X or Windows GUI (Graphical User Interface) version of HyPhy,\nor a command line you will supply in terminal with the command line version of HyPhy.  X  refers to a model parameter X.  The following formatting denotes text output to the screen by HyPhy.   [BUSTED] Selected 35 branches as the test (foreground) set: RABENSBURG_ISOLATE,WNFCG,SPU116_89,Node11,Node9,KUNCG,Node8,..\n[BUSTED] Obtaining initial branch lengths under the GTR model\n[BUSTED] Log(L) = -7745.475588071066\n[BUSTED] Fitting the unconstrained branch-site model", 
            "title": "Selection detection"
        }, 
        {
            "location": "/tutorials/selection/README/#estimate-alignment-wide", 
            "text": "Select the appropriate analysis to run  [if using GUI]  Choose  Analysis:Standard Analyses:Basic Analyses:AnalyzeCodonData.bf   \n  *  [if using CLI]  When presented with the list of standard analysis options upon launch, choose  Basic Analyses , then option 1 ( Analyse codon data with a variery of standard models using given tree. )    Universal  genetic code option  The file to process  [GUI]  In the file dialog, navigate to and select  WestNileVirus_NS3.fas  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.\n   /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas  MG94CUSTOMCF3X4  model; the  Muse Gaut 94  model with the  CF3x4  frequency estimator.  Global  model parameter option; estimate rate parameters jointly from all sites and branches.  012345  nucleotide substitution rates; estimate the general time reversible (GTR, 5 rates) model.  Confirm that the tree included in the file will be used   [GUI]  Type  y  into the  bottom box of the console window  (see red box in the image) and hit \"Enter\"\n      [CLI]  Type  y  and hit \"Enter\"   Estimate  branch lengths directly   The output should look like this  ______________RESULTS______________  Log   Likelihood   =   -6413 .50468184347 ;  Shared   Parameters :  R = 0 .008557848966878849  GT = 0 .2303600815210618  CT = 1 .979989664067556  CG = 0 .02076764883647483  AC = 0 .2428440082030551  AT = 0 .3056061615274677  Tree   givenTree =(((((( HNY1999 :0 .001101787189557129 , NY99_EQHS :0 .00108698796444847 ) Node6 :0 , NY99_FLAMINGO :0 ) Node5 :0 , MEX03 :0 .003274397587748566 ) Node4 :0 .001043699094072735 , IS_98 :0 .002238969679775947 ) Node3 :0 .0108106327401535 , PAH001 :0 .009947231998139823 ) Node2 :0 .006480815229843424 , AST99 :0 .01679372620666718 ,(((( RABENSBURG_ISOLATE :1 .05102590132809 ,( WNFCG :0 .01053193289945618 , SPU116_89 :0 .00569613982107767 ) Node19 :0 .507068944265484 ) Node17 :0 .5772661357618611 , KUNCG :0 .08756311980263866 ) Node16 :0 .06947527827356371 ,( ETHAN4766 :0 .02385184540957046 ,( CHIN_01 :0 .01206163326344818 , EG101 :0 .01506055273715259 ) Node25 :0 .007681688497219724 ) Node23 :0 .003442808476468687 ) Node15 :0 .01851421610241251 ,((( ITALY_1998_EQUINE :0 .009037431851104481 , PAAN001 :0 .007872553578665653 ) Node30 :0 .002694356278175029 ,( RO97_50 :0 .001642931262019352 , VLG_4 :0 .00108305411902561 ) Node33 :0 .002794580801147744 ) Node29 :0 .0007243769694723316 , KN3829 :0 .003058011972423634 ) Node28 :0 .01097965849521703 ) Node14 :0 .00929314901848397 );   The  R  parameter denotes the global   (dN/dS) ratio and is the object of this analysis.", 
            "title": "Estimate alignment-wide &omega;."
        }, 
        {
            "location": "/tutorials/selection/README/#run-alignment-wide-tests-for-episodic-diversification-busted", 
            "text": "BUSTED is a method described in  Murrell et al . It has been extensively tested and shows better power and accuracy than either  \"branch-site\" models in PAML , or the  \"covarion\" style models   We will perform branch-site model-based tests for episodic selection affecting a proportion of sites in\nthe alignment along a proportion of branches in the tree (i.e. is there evidence of selection  anywhere  in the alignment and  anywhere  on the tree).\nThe data set in we are using includes partial clonal HIV-1 env sequences from epidemiologically linked partners (source and recipient)   Select the appropriate analysis to run  [GUI]  Choose  Analysis:Standard Analyses:Positive Selection:BUSTED.bf  [CLI]  When presented with the list of standard analysis options upon launch, choose  Positive Selection , then option 4 ( Run the Branch-site Unrestricted Statistical Test for Episodic Diversification to test for evidence of episodic alignment-wide selective pressure. )  Universal  genetic code option  The file to process  [GUI]  In the file dialog, navigate to and select  HIV.nex  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nex  Confirm that the tree included in the file will be used  [GUI]  Type  y  into the bottom box of the console window and hit Enter  [CLI]  Type  y  and hit Enter  Choose all branches to include in the test ( All )  [CLI]  You will need to type  d  and hit \"Enter\" after selecting the  All  option to exit the selection dialog.   The analysis will now run for a few minutes and produce the following output  [BUSTED] Selected 26 branches as the test (foreground) set: R20_239,R20_245,Node5,R20_240,R20_238,R20_242,Node4,R20_241,Node3,R20_243,Node2,R20_244,Node1,D20_233,D20_235,D20_236,D20_232,Node17,D20_234,D20_237,Node21,Node16,D20_230,D20_231,Node24,Node15 \n[BUSTED] Obtaining initial branch lengths under the GTR model \n[BUSTED] Log(L) = -2114.132335772669 \n[BUSTED] Fitting the unconstrained branch-site model \n[BUSTED] Log(L) = -2039.992959126133. Unrestricted class omega = 104.6591567580357 (weight = 0.02032866068122922) \n[BUSTED] Fitting the branch-site model that disallows omega   1 among foreground branches \n[BUSTED] Log(L) = -2076.666683221396 \n[BUSTED] Likelihood ratio test for episodic positive selection, p = 1.110223024625157e-16   For example, in this case the analysis inferred that   A proportion of sites (~0.02) is evolving with dN/dS   1 (~105) along a subset of the branches (it is not known which).  Forcing dN/dS = 1 provides a significantly worse (p ~ 10 -16 ) fit to the data, i.e. rejects the hypothesis of no positive selection in the alignment.   In addition to this output, HyPhy will also generate a  JSON  file with a more detailed analysis output. The JSON will be written to same directory as the input alignment file, with  BUSTED.json  appended to the file name, e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nex.BUSTED.json   This JSON file can be visualized and explored with this  web app , e.g., to obtain plots like those shown in the lecture slides.", 
            "title": "Run alignment-wide tests for episodic diversification (BUSTED)."
        }, 
        {
            "location": "/tutorials/selection/README/#run-busted-using-datamonkeyorg", 
            "text": "Navigate to http://test.datamonkey.org, selected  BUSTED  from the  Methods and Tools  menu.  Choose the file to analyze on the next screen.  Use the analysis setup screen to select all the  donor  branches as the foreground (shift-click on the branches to add them to selection)  As the analysis runs, you will see a progress page looking something  like this  When the analysis finishes, you will be directed to a results page, which is very similar to the web app referenced above", 
            "title": "Run BUSTED using datamonkey.org"
        }, 
        {
            "location": "/tutorials/selection/README/#testing-for-selection-on-an-a-priori-specified-set-of-branches", 
            "text": "The tree in the  HIV.nex  is annotated with {} to indicate the set of test (\"foreground\") branches (e.g. you can use this  widget  to select foreground\nbranches and then export them to Newick using the  Newick:Export  menu dialog).  in this case the branch being tested is the  transmission  branch, i.e. the one separating the source and the recipient in the phylogenetic tree.\nBUSTED will only constrain     1 on these branches (allowing the rest of the tree to have its own   distribution) during testing.  An annotated Newick string looks like this (a single branch):   ((((((R20_239:0.001179071552709126,R20_245:0.003569393318767422):0.002373643652152119,R20_240:0.00354445225954759,\nR20_238:0,R20_242:0.007143686359514547):0.001169032517101171,R20_241:0.003555888002841892):0.001829250056707198,\nR20_243:0.006486065374683752):0.003845820830922537,R20_244:0.02113434306810657) {Test} :0.03269082780807394,\nD20_233:0.02550919363771013,(((D20_235:0,D20_236:0,D20_232:0):0.006433904687642939,\n(D20_234:0,D20_237:0):0.005843978498632621):0.01022675723558638,\n(D20_230:0.02979851732996924,D20_231:0.006905678660095517):0.02444611465196596):0.005946252173834307);   Repeat the analysis from the previous section, choosing option 4 ( Set Test ) in step 5.\nNote that you could also manually select the set of branches to test in the same dialog.  The results of this  a priori  analysis are  [BUSTED] Selected 1 branches as the test (foreground) set: Node1 \n[BUSTED] Obtaining initial branch lengths under the GTR model \n[BUSTED] Log(L) = -2114.13233621422 \n[BUSTED] Fitting the unconstrained branch-site model \n[BUSTED] Log(L) = -2031.302017161514. Unrestricted class omega = 524.9720891747666 (weight = 0.07815647810018292) \n[BUSTED] Fitting the branch-site model that disallows omega   1 among foreground branches \n[BUSTED] Log(L) = -2050.101940483789 \n[BUSTED] Likelihood ratio test for episodic positive selection, p = 6.843795752331516e-09", 
            "title": "Testing for selection on an a priori specified set of branches"
        }, 
        {
            "location": "/tutorials/selection/README/#questions", 
            "text": "Use the  web app  to visualize the JSON result file from this analysis and\ncompare the inferred   distributions for the foreground and background branches.  Explain why the log-likelihood for the unconstrained model is higher for the case when  a priori  branches are tested?  Do these results suggest that the transmission branch is evolving differently from the rest of the tree?  If the  a priori  analysis had a negative result (no selection along the transmission branch), might it still be possible to\nfind evidence of selection in the  All  branches analysis?", 
            "title": "Questions."
        }, 
        {
            "location": "/tutorials/selection/README/#use-absrel-to-find-lineages-which-have-experienced-episodic-diversification", 
            "text": "aBSREL is a method described in  Smith et al . It is an extension of our popular  BS-REL model , which performs a complexity analysis and model selection prior to doing hypothesis testing. It runs much faster than BS-REL and has better statistical properies.   We continue using the  HIV.nex  dataset from the previous example, but now we are interested in scanning the phylogeny\nfor all the branches where selection may have operated.   Select the appropriate analysis to run  [GUI]  Choose  Analysis:Standard Analyses:Positive Selection:BranchSiteREL.bf  [CLI]  When presented with the list of standard analysis options upon launch, choose  Positive Selection , then option 1 ( Use the random effects branch-site model (2010) to find lineages subject to episodic selection. )  Universal  genetic code option  Yes  to choose the adaptive version of BSREL.  No  to assume that synonymous rates do not vary from site to site  The file to process  [GUI]  In the file dialog, navigate to and select  HIV.nex'  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nex  Decline to use the tree included in the file (annotation from the previous step conflicts with the current aBSREL implementaton)  [GUI]  Type  n  into the bottom box of the console window and hit Enter  [CLI]  Type  n  and hit Enter  Choose the tree file  [GUI]  In the file dialog, navigate to and select  HIV.nwk'  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nwk  Choose all branches to test ( All )  [CLI]  You will need to type  d  and hit Enter after selecting the  All  option to exit the selection dialog.  Where to save the analysis results (more than one file, see below)  [GUI]  In the file dialog, find a place to save the result file, naming it  HIV.aBSREL .  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.aBSREL   The analysis will now run for several minutes and produce a lot of diagnostic output.  As the initial phase, aBSREL fits the standard Muse-Gaut 94 model which estimates a single   for each branch and prints out model fit statistics. This is the simplest model that can be selected by aBSREL.  [PHASE 0] Fitting the local MG94 (no site-to-site variation) to obtain initial parameter estimates\n\nLog L = -2069.673153141118 with 66 degrees of freedom. IC = 4273.293894919101\n\nBranch omega values\n\n    Count    = 26\n    Mean     = 5.015163008040247\n    Median   = 1.911847453671735\n    Variance = 20.26898469566522\n    Std.Dev  = 4.502108916459621\n    COV      = 0.8976994185915583\n    Sum      = 130.3942382090464\n    Sq. sum  = 1160.672977319228\n    Skewness = 0.8547462897381892\n    Kurtosis = 58.55544061358484\n    Min      = 0.1474879956566399\n    2.5%     = 0.1474879956566399\n    97.5%    = 10\n    Max      = 10  Next, aBSREL sorts all the branches by length (longest first), and tries to greedily add   categories to one branch at a time, until the addition is no longer justified by AIC c  scores. For example, for  Node1  (the transmission branch)  [PHASE 1] Fitting Branch Site REL models to one branch at a time\n\n[PHASE 1] Branch Node1 log(L) = -2048.380, IC = 4234.826\n    2 rate classes\n    Node: mixtureTree.Node1\n    Length parameter = 0.01335020389229876\n    Class 1\n        omega = 0.736\n        weight = 0.927\n    Class 2\n        omega = 499.798\n        weight = 0.073\n\n[PHASE 1] Branch Node1 log(L) = -2048.447423263603, IC = 4239.085721554758\n    3 rate classes\n    Node: mixtureTree.Node1\n    Length parameter = 0.0194263003300435\n    Class 1\n        omega = 0.385\n        weight = 0.925\n    Class 2\n        omega = 0.000\n        weight = 0.000\n    Class 3\n        omega = 314.702\n        weight = 0.075  using two rate classes improves the IC from 4273.3 to 4234.83, but going to three rate classes is not justified. aBSREL will now fix a 2-bin   distribution for  Node1  and move to the next branch. When all branches are done, a summary of inferred model complexity will be printed to the screen.  [INFERRED MODEL COMPLEXITY] \n     mixtureTree.R20_239   has   1   site   rate   classes \n     mixtureTree.R20_245   has   1   site   rate   classes \n     mixtureTree.Node5   has   1   site   rate   classes \n     mixtureTree.R20_240   has   1   site   rate   classes \n     mixtureTree.R20_238   has   1   site   rate   classes \n     mixtureTree.R20_242   has   1   site   rate   classes \n     mixtureTree.Node4   has   1   site   rate   classes \n     mixtureTree.R20_241   has   1   site   rate   classes \n     mixtureTree.Node3   has   1   site   rate   classes \n     mixtureTree.R20_243   has   1   site   rate   classes \n     mixtureTree.Node2   has   1   site   rate   classes \n     mixtureTree.R20_244   has   1   site   rate   classes \n     mixtureTree.Node1   has   2   site   rate   classes \n     mixtureTree.D20_233   has   2   site   rate   classes \n     mixtureTree.D20_235   has   1   site   rate   classes \n     mixtureTree.D20_236   has   1   site   rate   classes \n     mixtureTree.D20_232   has   1   site   rate   classes \n     mixtureTree.Node17   has   1   site   rate   classes \n     mixtureTree.D20_234   has   1   site   rate   classes \n     mixtureTree.D20_237   has   1   site   rate   classes \n     mixtureTree.Node21   has   1   site   rate   classes \n     mixtureTree.Node16   has   2   site   rate   classes \n     mixtureTree.D20_230   has   2   site   rate   classes \n     mixtureTree.D20_231   has   1   site   rate   classes \n     mixtureTree.Node24   has   2   site   rate   classes \n     mixtureTree.Node15   has   1   site   rate   classes   Note that only a few branches support 2   classes, and the majority are well-explained without any site-to-site variation.\nIn the next phase, aBSREL optimizes all parameters in the just inferred model model  [PHASE 2] Fitting the full LOCAL alternative model (no constraints)\n\nLog L = -2010.471450731734 with 76 degrees of freedom, IC = 4175.52599570315\n((((((R20_239:0.001180872214151883,R20_245:0.003568958594949872)Node5:0.00238190144130175,R20_240:0.003553829750818045,R20_238:0,R20_242:0.00716830032133561)Node4:0.001173481128053423,R20_241:0.003576676330678178)Node3:0.00155544697576297,R20_243:0.006756755941630225)Node2:0.00415900454948532,R20_244:0.02082000515352331)Node1:0.2905921716926325,D20_233:1.951982256546112,(((D20_235:0,D20_236:0,D20_232:0)Node17:0.006441027083836533,(D20_234:0,D20_237:0)Node21:0.005840812770752585)Node16:0.2538902924947701,(D20_230:1.765119288716005,D20_231:0.007781540968601186)Node24:0.02458866035691175)Node15:0)  Next, the analysis will proceed to test all the branches we selected in step 8 (which is  All ) to see if there is a proportion of sites\nwith     1 along that branch, and whose removal would cause a significant drop in log-likelihood. As a shortcut, if the branch has no sites with     1, it will not be tested (one can just set the p-value to 0.5).  This is the most time consuming phase of the analysis. As the tests are done, aBSREL will print out a running tally to the screen, including the rate distribution inferred for a particular branch under the null (    1) model, and the p-value for the branch. For example, the snippet below shows the alternative and null distributions of   along Node1 (the same branch we tested with BUSTED previously), and reports the  uncorrected  p-value for the test of selection at this branch.  Node :   mixtureTree . Node1 \n     Length   parameter   =   0.02933683537846648 \n     Class   1 \n         omega   =   0.872 \n         weight   =   0.932 \n     Class   2 \n         omega   =   751.770 \n         weight   =   0.068  ... Testing   for   selection   at   this   branch  Node :   mixtureTree . Node1 \n     Length   parameter   =   0.08668188509082339 \n     Class   1 \n         omega   =   0.816 \n         weight   =   0.000 \n     Class   2 \n         omega   =   1.000 \n         weight   =   1.000  p - value   =   9.103440223867665 e - 12   Once all the tests have been done, aBSREL will print out the list of all branches with p-values below 0.05  after \napplying the  Holm-Bonferroni multiple testing correction , and a CPU time report.  Summary of branches under episodic selection (26 were tested, of which 14 required optimizations) :\n    Node1 p = 2.45792886044427e-10\n    D20_233 p = 0.0001215300920816009\n    Node16 p = 0.0002149117196342809\n\n\n === CPU TIME REPORT === \n    MG94 model fit : 00:00:05\n    Rate class complexity analysis : 00:00:33\n    aBSREL model fit : 00:00:07\n    Individual branch selection testing : 00:01:29\n    Total time : 00:02:43  Output files generated by aBSREL will all be of the form  PREFIX.extension  where PREFIX is whatever you chose in step 9 above.   PREFIX.mglocal.fit  : a HyPhy batch file containing the model fit (including all parameter estimates) of PHASE 0 (only branch variation). This is a NEXUS file with a private NEXUS HYPHY block.  PREFIX.fit  : a HyPhy batch file containing the model fit (including all parameter estimates) of PHASE 2 (unconstrained branch-site model). This is a NEXUS file with a private NEXUS HYPHY block.  PREFIX.json : a JSON file storing all the relevant analysis output, it can be visualized with this  web app  PREFIX : a CSV file containing branch-by-branch output (similar to what is shown in the  Table  tab of the web app)", 
            "title": "Use aBSREL to find lineages which have experienced episodic diversification."
        }, 
        {
            "location": "/tutorials/selection/README/#questions_1", 
            "text": "Which model (aBSREL or BUSTED) provides a better fit to the data, based on AIC c  (the web apps report AIC c  in the summary table)?   Compare the   distributions inferred for Node1 (the transmission branch) by BUSTED with the  a priori  branch selection, and by aBSREL. If they differ, can you identify some of the key differences between the models that could explain the difference?  Use the  web app  to compare the list of branches which would have p-values   0.05 without the multiple test correction. Are the lists notably different?", 
            "title": "Questions."
        }, 
        {
            "location": "/tutorials/selection/README/#use-fubar-to-find-sites-which-have-experienced-pervasive-diversification", 
            "text": "FUBAR is described in  Murrell et al  which is intended to supersede (by dint of its speed and statistical performance), previous REL and FEL methods.   We will use the  WestNileVirus_NS3.fas  dataset to identify individual sites which have experienced pervasive diversification over the entire tree. An analysis by  Brault et al  using our older counting method (SLAC),\nfound a single site (249) subject to positive selection.   Select the appropriate analysis to run  [GUI]  Choose  Analysis:Standard Analyses:Selection/Recombination:FUBAR.bf  [CLI]  When presented with the list of standard analysis options upon launch, choose  Selection/Recombination , then option 1 ( Detect site-specific pervasive diversifying and purifying selection using the FUBAR (Fast Unbiased Bayesian AppRoximate) method on a multiple partition data set, e.g. produced by GARD. ). Note that, as suggested by the text, FUBAR can account for the confounding effect of recombination.  Universal  genetic code option  1  to specify that a single partition is being analyzed (you could specify more to correct for recombination).  Confirm that the tree included in the file will be used  [GUI]  Type  y  into the bottom box of the console window and hit Enter  [CLI]  Type  y  and hit Enter  The file to process  [GUI]  In the file dialog, navigate to and select  HIV.nex'  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data//WestNileVirus_NS3.fas . The analysis will now begin running (see output below but more propmts await). As BUSTED and aBSREL, FUBAR will write a number of  PREFIX.exention  files to disk.  PREFIX  is the path to the alignment file in this case, and the context of h  Choose N to define an NxN grid (use the default 20)  [GUI]  Type  20  into the bottom box of the console window and hit Enter  [CLI]  Type  20  and hit Enter  Choose the number of MCMC chains to run (use  3 )  Specify Markov chain parameters (use suggested defaults, i.e.,  2000000 ,  1000000 ,  100 ,  0.05 )  [GUI]  Type  3  into the bottom box of the console window and hit Enter  [CLI]  Type  3  and hit Enter   Output after Step 5  FUBAR will write intermediate and result files to\n/Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.extension\n\n[FUBAR PHASE 1] Optimizing relative branch lengths under the nucleotide REV model\n[FUBAR PHASE 1 FINISHED] log(L) = -7745.475468266388\n    Length of tree 1 (substitutions/site) = 0.6721285491158012\n[DIAGNOSTIC] FUBAR wrote the self-contained nucleotide fit file to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.gtr_fit  Output after Step 6  [DIAGNOSTIC] FUBAR will use a 20X20 grid\n[FUBAR PHASE 2] Determining appropriate branch scaling using the 20X20 grid points.\nComputing the likelihood function on grid points 400/400 00:00:02   Best scaling achieved for dN/dS =  0.03.\n    Computing site-by-site likelihoods at 20X20 grid points\nComputing the likelihood function on grid points 400/400 00:00:03   Finished with likelihood calculations. Achieved throughput of  66.67 calculations/second\n[DIAGNOSTIC] FUBAR wrote the self-contained codon fit file to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.codon_fit\n[DIAGNOSTIC] FUBAR wrote the the site likelihoods file to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.grid_info  Output after Step 8  [FUBAR PHASE 3] Running an MCMC chain (ID 0) to obtain a posterior sample of grid point weights: 2000000 total steps, of which 1000000 will be discarded as burn-in, and sampling every 10000 steps. Dirichlet prior concentration parameter = 0.5.\nRunning MCMC chain ID 0. Current step: 2000000/2000000. Mean sampled log(L) = -6619.31564200728. Acceptance rate = 0.03111951555975778\n[FUBAR PHASE 3] Running an MCMC chain (ID 1) to obtain a posterior sample of grid point weights: 2000000 total steps, of which 1000000 will be discarded as burn-in, and sampling every 10000 steps. Dirichlet prior concentration parameter = 0.5.\nRunning MCMC chain ID 1. Current step: 2000000/2000000. Mean sampled log(L) = -6619.258683970502. Acceptance rate = 0.03157801578900789\n[FUBAR PHASE 3] Running an MCMC chain (ID 2) to obtain a posterior sample of grid point weights: 2000000 total steps, of which 1000000 will be discarded as burn-in, and sampling every 10000 steps. Dirichlet prior concentration parameter = 0.5.\nRunning MCMC chain ID 2. Current step: 2000000/2000000. Mean sampled log(L) = -6620.143375380813. Acceptance rate = 0.03128851564425782\n[FUBAR PHASE 3 DONE] Finished running the MCMC chains; drew 3x100 samples from chains of length 2000000 after discarding 1000000 burn-in steps. Achieved throughput of 125000 moves/sec.\n\n[DIAGNOSTIC] FUBAR wrote samples from 3 independent chains to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.samples[0-2]\n\n\nTabulating results for site 618/619 00:00:01\n[DIAGNOSTIC] FUBAR wrote the results of its analysis to /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas.fubar.csv  Final results  [RESULTS] At posterior probability  = 0.9 there were 1 sites under diversifying positive selection, of which  0.01 [0 - 0] are expected to be false positives.\n\nCodon   Prob[dN/dS 1]   EBF[dN/dS] 1    PSRF    N_eff\n249 0.9877421834151304  562.1145080622537   1.063515998847144   24.05393297483982", 
            "title": "Use FUBAR to find sites which have experienced pervasive diversification."
        }, 
        {
            "location": "/tutorials/selection/README/#questions_2", 
            "text": "Try the same analysis with different grid sizes (5,10,30).  How do the run times change?  Are the results robust to the choice of N?  Run FUBAR with using the same settings on a large HIV RT dataset ( 400 sequences)  HIV_RT.nex , which was previously analyzed by us using a [dedicated method for finding directional selection, MEDS] (http://www.ploscompbiol.org/article/info%3Adoi%2F10.1371%2Fjournal.pcbi.1002507).  How does FUBAR time scale with the number of sequences?  How does the list of sites found by FUBAR compare with the MEDS paper?  And with the list of sites known for their as resistance associated for  NNRTI  and  NRTI ?  Explore the effect of correcting for recombination with partitioning, by running FUBAR on  CVV_G.fas  [no partitioning] and  CVV_G_GARD.nex  [partitioning into non-recombinant fragments using GARD]. How different are the lists of sites produced by the analyses?", 
            "title": "Questions"
        }, 
        {
            "location": "/tutorials/selection/README/#use-meme-to-find-sites-which-have-experienced-episodic-diversification", 
            "text": "MEME is a  published method  which is our default recommendation for finding individual sites under selection. It is MUCH slower than FUBAR, however, so there's room for both.   We continue to use the  WestNileVirus_NS3.fas  dataset from the previous example, to find sites where selection operated along a subset of branches, while the rest of the tree may have been strongly conserved (in  addition  to the type of sites found by FUBAR).  MEME tests each individual site separately; it runs quite slowly on a desktop, but very quickly on a cluster. You may also run MEME on  datamonkey  to speed up the process. MEME requires a lot of user input (this is a legacy issue and will be addressed in the upcoming HyPhy v3 release).   Select the appropriate analysis to run  [GUI]  Choose  Analysis:Standard Analyses:Selection:QuickSelectionDetection.bf  [CLI]  When presented with the list of standard analysis options upon launch, choose  Positive Selection  (10), then option 9 ( Quickly test for positive selection using several approaches. ).  Universal  genetic code option  New analysis  The file to process  [GUI]  In the file dialog, navigate to and select  HIV.nex'  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3.fas .  012345  (GTR combined with the codon model)  Confirm that the tree included in the file will be used  [GUI]  Type  y  into the bottom box of the console window and hit Enter  [CLI]  Type  y  and hit Enter  Save nucleotide model fit to  PREFIX.gtr . We'll replace PREFIX with somewhere on the file system you wish to save the results to, e.g.,  /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3_meme  Estimate dN/dS only  MEME  (HyPhy will start running the analysis now)  0.1  for the p-value (MEME is a conservative test on small alignments)  N  (do not save fit files for individual codons)  [This prompt will appear  after  the analysis is finished] Save the CSV file with analysis results to  PREFIX.csv , e.g.,  /Users/sergei/Coding/hyphy-tutorials/selection/data/WestNileVirus_NS3_meme   Output after step 8  Phase   1 : Nucleotide   Model   ( 012345 )   Model   Fit  - 7745.47549841979  Phase   2 : MG94x ( 012345 )   Model   Fit  Phase   3 : Estimating   dN / dS  Nuc - codon   scaling   factor : 3.091598974159624  Raw   scaling   factor : 3.091598974159624  Tree   scaling   factor ( S ) :   1  Using   dN / dS = 0.02681098065530952  Codon   model : - 6564.63922229292  Phase   4 :   Ancestral   State   Reconstruction   and   Counting   After step 10, for each codon, a line like this will be printed (this will also be saved to the final CSV file).  | Codon:  249| Beta1:       0.86| P(Beta1):  0.00| Beta2:       2.50| P(Beta2):  1.00| alpha:       0.00| LRT:   7.62| p:  0.01| Log(L): -33.85 *P    is the estimate for the synonymous rate at this site shared by all branches  1 is the estimate for the first non-synonymous rate; by definition  1     P( 1) is the proportion of branches at that site which are estimated to evolve with with  1  2 is the estimate for the second non-synonymous rate;  2 is unconstrained  P( 2) is the proportion of branches at that site which are estimated to evolve with with  2  LRT is the likelihood ratio test statistic obtained relative to the null which sets  2      p is the p-value for positive selection at this site  if *P is displayed at the end of the line, the p-value is at or below the threshold chosen in step 9.", 
            "title": "Use MEME to find sites which have experienced episodic diversification."
        }, 
        {
            "location": "/tutorials/selection/README/#questions_3", 
            "text": "Find sites detected as selected by MEME, but not by FUBAR. What makes them different from those which are detected by both methods?  Using R (or another data analysis package), plot how LRT (or p-value) varies over sites.  Is  (1-p)  [p-value] of MEME correlated with the posterior probability of positive selection derived by FUBAR (use a non-parametric association test, e.g. rank correlation)? Use the CSV files generated by each analysis to import the results into a statistical package for analysis.", 
            "title": "Questions"
        }, 
        {
            "location": "/tutorials/selection/README/#use-relax-to-compare-selective-pressures-on-different-parts-of-the-tree", 
            "text": "RELAX is a method described in  Wertheim et al . It is based on the  BS-REL model  branch site framework, but the tree is partitioned (a priori) into non-overlapping sets of branches, and the separate distributions of   are fitted to each set and compared for relative  relaxation  (  values contract to 1) or  intensification  (  values move away from 1).   We continue using the  HIV.nex  dataset, and are now interested in seeing if natural selection in the recipient ( R  branches) and the donor ( D  branches) operate at different intensities.   Select the appropriate analysis to run  [GUI]  Choose  Analysis:Standard Analyses:Positive Selection:RELAX.bf  [CLI]  When presented with the list of standard analysis options upon launch, choose  Positive Selection , then option 10 ( Test whether selected branches are under relaxed or intensified selection against reference branches. )  Universal  genetic code option  The file to process  [GUI]  In the file dialog, navigate to and select  HIV.nex  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data/HIV.nex  Decline to use the tree included in the file (we will use a tree with different branch annotation)  [GUI]  Type  n  into the bottom box of the console window and hit Enter  [CLI]  Type  n  and hit Enter  Choose the tree file  [GUI]  In the file dialog, navigate to and select  HIV-relax.nwk'  [CLI]  Input the full path name to the file (make sure there is no trailing space), e.g.  /Users/sergei/Coding/hyphy-tutorials/selection/data/HIV-relax.nwk  Select the  test  set of branches  [GUI]  Choose  Recipient    [CLI]  Choose option 3 ( Recipient )  Select the  reference  set of branches  [GUI]  Choose  Donor    [CLI]  Choose option 2 ( Donor )  Select analysis type (selecting  Minimal  will greatly reduce run time)  [GUI]  Choose  Minimal    [CLI]  Choose option 2 ( Minimal )   The output of the analysis will look like    [RELAX] Obtaining branch lengths under the GTR model \n[RELAX] Log(L) = -2114.132338088236 \n[RELAX] Obtaining omega and branch length estimates under the partitioned MG94xGTR model \n[RELAX] Log(L) = -2076.093223041783 \n[RELAX] Fitting the RELAX null model \n[RELAX] Log(L) = -2031.204697143867 \n[RELAX] Fitting the RELAX alternative model \n[RELAX] Log(L) = -2024.075837744705. Relaxation parameter K = 0.4389230603260226 \n[RELAX] Likelihood ratio test for relaxation on Test branches, p = 0.0001594057084282063   The result of the analysis is that \"Test\" (recipient) branches have   that scales like    K , where  K  is 0.4389, i.e., shrink towards 1 (selection is weaker). The likelihood ratio test is to reject  K=1  (no difference is selective pressure), which yields a highly significant p = 0.00016 here.  Like in other analyses, HyPhy will generate a JSON file (e.g.,  HIV.nex.RELAX.json ) storing all the relevant analysis output, which can be visualized with this  web app . For example, you can see the fitted rate distributions.", 
            "title": "Use RELAX to compare selective pressures on different parts of the tree"
        }, 
        {
            "location": "/glossary/", 
            "text": "aBSREL Glossary\n#\n\n\nSummary Statistics\n#\n\n\nnumber of sequences - the number of sequences present in the input file\n\n\nnumber of variants - the number of variants present in the input file\n\n\nnumber of branches - the number of branches in the phylogeny\n\n\naBSREL results summary\n#\n\n\nLRT - likelihood ratio test implemented as described in Smith et al., 2015 (Mol. Biol. Evol. 32:1342).\n\n\nmultiple testing correction - as the number of multiple statistical inferences or comparisons that are considered simultaneously increase, by chance, an increasing number of comparisons will result in a significant p-value that represent false positives. To offset this problem, multiple test corrections such as the Holm-Bonferroni correction (Holm, 1979, Scand. J. Statist., 6:65) are applied.\n\n\nModel Fits Table\n#\n\n\nMG94 - the standard Muse-Gaut 94 model estimates a single \u03c9 for each branch \n\n\nFull model - the aBSREL model estimates up to ten \u03c9 rate classes for each branch\n\n\nlog\n L - log likelihood estimate of the respective model\n\n\n# par. - the number of parameters in the model\n\n\nAIC\nc\n  - small-sample Akaike Information Criterion (Sigiura, 1978, Commun. Stat. Theory Methods, A7:13) is used to infer the optinal number of rate categories to be used for each branch in the phylogeny.\n\n\nL\ntree\n - [[add in definition]]\n\n\nTree Table\n#\n\n\n\u03c9 rate classes - the number of inferred rate classes. \u03c9 represents the ratio of nonsynonymous to synonymous substitution\n\n\n# of branches - the number of branches inferred to have the respective number of \u03c9 rate classes \n\n\n% of branches - the proportion of branches in the phylogeny inferred to have the respective number of \u03c9 rate classes \n\n\n% of tree length - the proportion of the total tree length inferred to have the respective number of \u03c9 rate classes \n\n\n# under selection - the number of branches inferred to have a non neutral \u03c9 rate class at the designated p-value threshold\n\n\nFull Table\n#\n\n\nB LRT - branch length likelihood ratio test statistic\n\n\nTest p-value - multiple testing corrected p-value (Holm, 1979, Scand. J. Statist., 6:65)\n\n\nUncorrected p-value - raw p-value\n\n\n\u03c9 distribution over sites - inferred \u03c9 branch rates and respective proportion of branch sites", 
            "title": "Glossary"
        }, 
        {
            "location": "/glossary/#absrel-glossary", 
            "text": "", 
            "title": "aBSREL Glossary"
        }, 
        {
            "location": "/glossary/#summary-statistics", 
            "text": "number of sequences - the number of sequences present in the input file  number of variants - the number of variants present in the input file  number of branches - the number of branches in the phylogeny", 
            "title": "Summary Statistics"
        }, 
        {
            "location": "/glossary/#absrel-results-summary", 
            "text": "LRT - likelihood ratio test implemented as described in Smith et al., 2015 (Mol. Biol. Evol. 32:1342).  multiple testing correction - as the number of multiple statistical inferences or comparisons that are considered simultaneously increase, by chance, an increasing number of comparisons will result in a significant p-value that represent false positives. To offset this problem, multiple test corrections such as the Holm-Bonferroni correction (Holm, 1979, Scand. J. Statist., 6:65) are applied.", 
            "title": "aBSREL results summary"
        }, 
        {
            "location": "/glossary/#model-fits-table", 
            "text": "MG94 - the standard Muse-Gaut 94 model estimates a single \u03c9 for each branch   Full model - the aBSREL model estimates up to ten \u03c9 rate classes for each branch  log  L - log likelihood estimate of the respective model  # par. - the number of parameters in the model  AIC c   - small-sample Akaike Information Criterion (Sigiura, 1978, Commun. Stat. Theory Methods, A7:13) is used to infer the optinal number of rate categories to be used for each branch in the phylogeny.  L tree  - [[add in definition]]", 
            "title": "Model Fits Table"
        }, 
        {
            "location": "/glossary/#tree-table", 
            "text": "\u03c9 rate classes - the number of inferred rate classes. \u03c9 represents the ratio of nonsynonymous to synonymous substitution  # of branches - the number of branches inferred to have the respective number of \u03c9 rate classes   % of branches - the proportion of branches in the phylogeny inferred to have the respective number of \u03c9 rate classes   % of tree length - the proportion of the total tree length inferred to have the respective number of \u03c9 rate classes   # under selection - the number of branches inferred to have a non neutral \u03c9 rate class at the designated p-value threshold", 
            "title": "Tree Table"
        }, 
        {
            "location": "/glossary/#full-table", 
            "text": "B LRT - branch length likelihood ratio test statistic  Test p-value - multiple testing corrected p-value (Holm, 1979, Scand. J. Statist., 6:65)  Uncorrected p-value - raw p-value  \u03c9 distribution over sites - inferred \u03c9 branch rates and respective proportion of branch sites", 
            "title": "Full Table"
        }, 
        {
            "location": "/support/", 
            "text": "Support\n#\n\n\nSupport can be found on the \nHyPhy Github Issues Page\n.\n\n\nPlease be sure to search closed issues before opening a new one.", 
            "title": "Support"
        }, 
        {
            "location": "/support/#support", 
            "text": "Support can be found on the  HyPhy Github Issues Page .  Please be sure to search closed issues before opening a new one.", 
            "title": "Support"
        }
    ]
}